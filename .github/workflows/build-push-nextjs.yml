name: Docker Build and Push NextJS App

on:
  workflow_run:
    workflows: ["Format Linting Typecheck and Unit Test"]
    types: completed
    branches: ["main"]

jobs:
  verify-changes:
    runs-on: ubuntu-latest
    steps:
      - uses: tj-actions/verify-changed-files@v20
        id: verify-changed-files
        with:
          files: |
            apps/nextjs/**
            packages/**
            .github/workflows/buildandpush.yml
      - name: Cancel Workflow if no changes
        uses: styfle/cancel-workflow-action@0.9.1
        if:
        with: ${{ steps.verify-changed-files.outputs.files_changed != 'true' }}

  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get commit hash
        id: get-commit-hash
        run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"

      - name: Get timestamp
        id: get-timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"

      - name: Build and push the tagged docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
          IMAGE_TAG: latest
        run: |
          docker build \
            --build-arg ARG_POSTGRES_URL=${{ secrets.ARG_POSTGRES_URL }} \
            --build-arg ARG_NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.ARG_NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -f apps/nextjs/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: SSH into EC2 instance and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.AWS_EC2_HOST}}
          username: ${{secrets.AWS_EC2_USER}}
          key: ${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}
          script: |
            echo "AWS CLI version: $(aws --version)"
            echo "Docker version: $(docker --version)"

            echo "Stop the current running container if exist..."
            docker stop planty || true

            echo "Remove the previous container..."
            docker rm planty || true

            echo "AWS credentials set...."
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}

            echo "Logging in to ECR...."
            aws ecr get-login-password --region ${{secrets.AWS_REGION}} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}/${{secrets.AWS_ECR_REPO}}
            echo "Logged in successful..."

            echo "Pulling  image from ECR..."
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{secrets.AWS_ECR_REPO}}:latest
            echo "Docker pull completed..."

            echo "Running the container..."
            docker run -d \
              -e CLERK_SECRET_KEY=$(aws ssm get-parameter --name "CLERK_SECRET_KEY" --with-decryption --query "Parameter.Value" --output text) \
              -e WEBHOOK_SECRET=$(aws ssm get-parameter --name "WEBHOOK_SECRET" --with-decryption --query "Parameter.Value" --output text) \
              -e POSTGRES_URL=$(aws ssm get-parameter --name "POSTGRES_URL" --with-decryption --query "Parameter.Value" --output text) \
              --name planty \
              -p ${{secrets.AWS_EXPOSED_PORT}}:${{secrets.AWS_APPLICATION_PORT}} ${{steps.login-ecr.outputs.registry}}/${{secrets.AWS_ECR_REPO}}:latest
